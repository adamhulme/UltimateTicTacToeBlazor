@page "/"
@using UltimateTicTacToe.Models
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Ultimate Tic Tac Toe</PageTitle>

<div class="game-container">
    <h1>Ultimate Tic Tac Toe</h1>
    
    @if (!gameStarted)
    {
        <div class="player-setup">
            <h3>Player Setup</h3>
            <div class="player-inputs">
                <div class="player-input">
                    <label for="playerX">Player X Name:</label>
                    <input id="playerX" @bind="playerXName" placeholder="Enter Player X name" maxlength="20" />
                </div>
                <div class="player-input">
                    <label for="playerO">Player O Name:</label>
                    <input id="playerO" @bind="playerOName" placeholder="Enter Player O name" maxlength="20" />
                </div>
            </div>
            
            <div class="game-mode-selection">
                <h4>Game Mode</h4>
                <div class="mode-options">
                    <div class="mode-option">
                        <input type="radio" id="unlimited" name="gameMode" value="Unlimited" @onchange="() => selectedGameMode = GameMode.Unlimited" checked="@(selectedGameMode == GameMode.Unlimited)" />
                        <label for="unlimited">
                            <strong>Unlimited Time</strong>
                            <small>Take as long as you need</small>
                        </label>
                    </div>
                    <div class="mode-option">
                        <input type="radio" id="blitz" name="gameMode" value="Blitz" @onchange="() => selectedGameMode = GameMode.Blitz" checked="@(selectedGameMode == GameMode.Blitz)" />
                        <label for="blitz">
                            <strong>Blitz</strong>
                            <small>30 seconds per move</small>
                        </label>
                    </div>
                    <div class="mode-option">
                        <input type="radio" id="rapid" name="gameMode" value="Rapid" @onchange="() => selectedGameMode = GameMode.Rapid" checked="@(selectedGameMode == GameMode.Rapid)" />
                        <label for="rapid">
                            <strong>Rapid</strong>
                            <small>60 seconds per move</small>
                        </label>
                    </div>
                    <div class="mode-option">
                        <input type="radio" id="classical" name="gameMode" value="Classical" @onchange="() => selectedGameMode = GameMode.Classical" checked="@(selectedGameMode == GameMode.Classical)" />
                        <label for="classical">
                            <strong>Classical</strong>
                            <small>3 minutes per move</small>
                        </label>
                    </div>
                </div>
            </div>
            
            <button class="btn btn-success start-game-btn" @onclick="StartGame" disabled="@(string.IsNullOrWhiteSpace(playerXName) || string.IsNullOrWhiteSpace(playerOName))">
                Start Game
            </button>
        </div>
    }
    else
    {
        <div class="scoreboard">
            <div class="player-score">
                <span class="player-name">@playerXName (X)</span>
                <span class="score">@playerXScore</span>
            </div>
            <div class="score-separator">-</div>
            <div class="player-score">
                <span class="player-name">@playerOName (O)</span>
                <span class="score">@playerOScore</span>
            </div>
        </div>
        
        <div class="game-info">
            <div class="status">
                @if (game.State == BoardState.Active)
                {
                    var currentPlayerName = game.CurrentPlayer == CellState.X ? playerXName : playerOName;
                    <span>Current Player: <strong>@currentPlayerName (@game.CurrentPlayer)</strong></span>
                    
                    @if (selectedGameMode != GameMode.Unlimited)
                    {
                        <div class="timer-display">
                            <span class="timer-label">Time remaining:</span>
                            <span class="timer-value @GetTimerClass()">@FormatTime(remainingTime)</span>
                        </div>
                    }
                    
                    @if (game.NextBoardRow.HasValue && game.NextBoardCol.HasValue)
                    {
                        var boardPosition = GetBoardPositionName(game.NextBoardRow.Value, game.NextBoardCol.Value);
                        <span class="next-board">| Must play in <strong class="board-location">@boardPosition</strong> board</span>
                    }
                }
                else if (game.State == BoardState.WonByX)
                {
                    var nextStarterName = nextGameStarter == CellState.X ? playerXName : playerOName;
                    <span class="winner">🎉 @playerXName Wins! 🎉</span>
                    <br />
                    <span class="next-starter">@nextStarterName will start the next game</span>
                }
                else if (game.State == BoardState.WonByO)
                {
                    var nextStarterName = nextGameStarter == CellState.X ? playerXName : playerOName;
                    <span class="winner">🎉 @playerOName Wins! 🎉</span>
                    <br />
                    <span class="next-starter">@nextStarterName will start the next game</span>
                }
                else
                {
                    var nextStarterName = nextGameStarter == CellState.X ? playerXName : playerOName;
                    <span class="draw">Game ended in a draw!</span>
                    <br />
                    <span class="next-starter">@nextStarterName will start the next game</span>
                }
            </div>
            
            <div class="game-buttons">
                <button class="btn btn-primary reset-btn" @onclick="ResetGame">New Game</button>
                <button class="btn btn-secondary setup-btn" @onclick="BackToSetup">Change Players</button>
            </div>
        </div>

        <div class="ultimate-board">
        @for (int boardRow = 0; boardRow < 3; boardRow++)
        {
            @for (int boardCol = 0; boardCol < 3; boardCol++)
            {
                var currentBoardRow = boardRow;
                var currentBoardCol = boardCol;
                var board = game.Boards[boardRow, boardCol];
                var isActiveBoard = !game.NextBoardRow.HasValue || 
                                  (game.NextBoardRow == boardRow && game.NextBoardCol == boardCol);
                var boardClass = GetBoardClass(board, isActiveBoard);
                
                <div class="small-board @boardClass">
                    @if (board.State == BoardState.WonByX)
                    {
                        <div class="board-winner">X</div>
                    }
                    else if (board.State == BoardState.WonByO)
                    {
                        <div class="board-winner">O</div>
                    }
                    else if (board.State == BoardState.Draw)
                    {
                        <div class="board-draw">Draw</div>
                    }
                    else
                    {
                        @for (int cellRow = 0; cellRow < 3; cellRow++)
                        {
                            @for (int cellCol = 0; cellCol < 3; cellCol++)
                            {
                                var currentCellRow = cellRow;
                                var currentCellCol = cellCol;
                                var cell = board.Cells[cellRow, cellCol];
                                var cellClass = GetCellClass(cell, isActiveBoard && game.State == BoardState.Active);
                                
                                <button class="cell @cellClass" 
                                        @onclick="() => MakeMove(currentBoardRow, currentBoardCol, currentCellRow, currentCellCol)"
                                        disabled="@(!CanMakeMove(currentBoardRow, currentBoardCol, currentCellRow, currentCellCol))">
                                    @GetCellDisplay(cell.State)
                                </button>
                            }
                        }
                    }
                </div>
            }
        }
    </div>
    }
</div>

@code {
    private UltimateBoard game = new UltimateBoard();
    private bool gameStarted = false;
    private string playerXName = "";
    private string playerOName = "";
    private int playerXScore = 0;
    private int playerOScore = 0;
    private CellState nextGameStarter = CellState.X; // Track who should start the next game
    private GameMode selectedGameMode = GameMode.Unlimited;
    
    // Timer-related variables
    private Timer? moveTimer;
    private int remainingTime = 0;
    private bool isTimerRunning = false;

    private void StartGame()
    {
        gameStarted = true;
        game = new UltimateBoard();
        game.SetStartingPlayer(nextGameStarter);
        StartMoveTimer();
    }

    private void BackToSetup()
    {
        gameStarted = false;
        game = new UltimateBoard();
        nextGameStarter = CellState.X; // Reset to X when changing players
        StopTimer();
    }

    private void MakeMove(int boardRow, int boardCol, int cellRow, int cellCol)
    {
        var previousState = game.State;
        bool success = game.MakeMove(boardRow, boardCol, cellRow, cellCol);
        
        if (success)
        {
            // Reset timer for next player
            if (selectedGameMode != GameMode.Unlimited && game.State == BoardState.Active)
            {
                StartMoveTimer();
            }
            else if (game.State != BoardState.Active)
            {
                StopTimer();
            }
        }
        
        // Check if the game just ended and update scores
        if (success && previousState == BoardState.Active && game.State != BoardState.Active)
        {
            if (game.State == BoardState.WonByX)
            {
                playerXScore++;
            }
            else if (game.State == BoardState.WonByO)
            {
                playerOScore++;
            }
            
            // Swap the starting player for the next game
            nextGameStarter = nextGameStarter == CellState.X ? CellState.O : CellState.X;
        }
    }

    private void StartMoveTimer()
    {
        StopTimer(); // Stop any existing timer
        
        if (selectedGameMode == GameMode.Unlimited) return;
        
        remainingTime = GetTimeLimit();
        isTimerRunning = true;
        
        moveTimer = new Timer(async _ =>
        {
            if (remainingTime > 0 && isTimerRunning && game.State == BoardState.Active)
            {
                remainingTime--;
                await InvokeAsync(StateHasChanged);
            }
            else if (remainingTime <= 0 && isTimerRunning && game.State == BoardState.Active)
            {
                // Time's up - make a random valid move
                await InvokeAsync(() =>
                {
                    TimeOutMove();
                });
            }
        }, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }

    private void StopTimer()
    {
        isTimerRunning = false;
        moveTimer?.Dispose();
        moveTimer = null;
    }

    private int GetTimeLimit()
    {
        return selectedGameMode switch
        {
            GameMode.Blitz => 30,
            GameMode.Rapid => 60,
            GameMode.Classical => 180,
            _ => 0
        };
    }

    private void TimeOutMove()
    {
        // Find a random valid move
        var validMoves = new List<(int boardRow, int boardCol, int cellRow, int cellCol)>();
        
        for (int boardRow = 0; boardRow < 3; boardRow++)
        {
            for (int boardCol = 0; boardCol < 3; boardCol++)
            {
                for (int cellRow = 0; cellRow < 3; cellRow++)
                {
                    for (int cellCol = 0; cellCol < 3; cellCol++)
                    {
                        if (CanMakeMove(boardRow, boardCol, cellRow, cellCol))
                        {
                            validMoves.Add((boardRow, boardCol, cellRow, cellCol));
                        }
                    }
                }
            }
        }
        
        if (validMoves.Count > 0)
        {
            var random = new Random();
            var randomMove = validMoves[random.Next(validMoves.Count)];
            MakeMove(randomMove.boardRow, randomMove.boardCol, randomMove.cellRow, randomMove.cellCol);
        }
        
        StateHasChanged();
    }

    private string FormatTime(int seconds)
    {
        if (seconds >= 60)
        {
            int minutes = seconds / 60;
            int remainingSeconds = seconds % 60;
            return $"{minutes}:{remainingSeconds:D2}";
        }
        return seconds.ToString();
    }

    private string GetTimerClass()
    {
        if (remainingTime <= 5)
            return "timer-critical";
        else if (remainingTime <= 10)
            return "timer-warning";
        else
            return "timer-normal";
    }

    private bool CanMakeMove(int boardRow, int boardCol, int cellRow, int cellCol)
    {
        if (game.State != BoardState.Active) return false;
        if (game.Boards[boardRow, boardCol].State != BoardState.Active) return false;
        if (game.Boards[boardRow, boardCol].Cells[cellRow, cellCol].State != CellState.Empty) return false;
        
        if (game.NextBoardRow.HasValue && game.NextBoardCol.HasValue)
        {
            return boardRow == game.NextBoardRow.Value && boardCol == game.NextBoardCol.Value;
        }
        
        return true;
    }

    private string GetBoardClass(SmallBoard board, bool isActive)
    {
        var classes = new List<string>();
        
        if (board.State == BoardState.WonByX) classes.Add("won-by-x");
        else if (board.State == BoardState.WonByO) classes.Add("won-by-o");
        else if (board.State == BoardState.Draw) classes.Add("draw");
        
        if (isActive && game.State == BoardState.Active) classes.Add("active-board");
        
        return string.Join(" ", classes);
    }

    private string GetCellClass(Cell cell, bool isInteractable)
    {
        var classes = new List<string>();
        
        if (cell.State == CellState.X) classes.Add("x");
        else if (cell.State == CellState.O) classes.Add("o");
        
        if (!isInteractable) classes.Add("disabled");
        
        return string.Join(" ", classes);
    }

    private string GetCellDisplay(CellState state)
    {
        return state switch
        {
            CellState.X => "X",
            CellState.O => "O",
            _ => ""
        };
    }

    private void ResetGame()
    {
        game = new UltimateBoard();
        game.SetStartingPlayer(nextGameStarter);
        StartMoveTimer();
    }

    private string GetBoardPositionName(int row, int col)
    {
        return (row, col) switch
        {
            (0, 0) => "upper left",
            (0, 1) => "upper middle",
            (0, 2) => "upper right",
            (1, 0) => "middle left",
            (1, 1) => "center",
            (1, 2) => "middle right",
            (2, 0) => "lower left",
            (2, 1) => "lower middle",
            (2, 2) => "lower right",
            _ => "unknown"
        };
    }

    public void Dispose()
    {
        StopTimer();
    }
}
