@page "/bots"
@using UltimateTicTacToeBlazor.Services
@inject BotService BotService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>AI Bot Management</PageTitle>

<div class="bot-management">
    <h1>ü§ñ AI Bot Management</h1>
    
    <div class="management-sections">
        <!-- Training Section -->
        <div class="section training-section">
            <h2>üß† Train New Bot</h2>
            
            @if (currentTraining?.IsActive == true)
            {
                <div class="training-progress">
                    <h3>Training: @currentTraining.BotName</h3>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: @($"{currentTraining.ProgressPercentage:F1}%")"></div>
                    </div>
                    <div class="progress-info">
                        <span>@currentTraining.CurrentIteration / @currentTraining.TargetIterations iterations</span>
                        <span>@currentTraining.ElapsedTime.ToString(@"hh\:mm\:ss")</span>
                    </div>
                    <p class="status">@currentTraining.Status</p>
                    <button class="btn btn-danger" @onclick="StopTraining">Stop Training</button>
                </div>
            }
            else
            {
                <div class="training-form">
                    <div class="form-group">
                        <label>Bot Name:</label>
                        <input @bind="newBotName" placeholder="Enter bot name" class="form-control" />
                    </div>
                    
                    <div class="form-group">
                        <label>Training Iterations:</label>
                        <select @bind="trainingIterations" class="form-control">
                            <option value="50">50 (Quick Test - 10 minutes)</option>
                            <option value="100">100 (Basic - 20 minutes)</option>
                            <option value="250">250 (Intermediate - 1 hour)</option>
                            <option value="500">500 (Advanced - 2 hours)</option>
                            <option value="1000">1000 (Expert - 4 hours)</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>Description:</label>
                        <input @bind="botDescription" placeholder="Optional description" class="form-control" />
                    </div>
                    
                    <div class="form-group">
                        <label>
                            <input type="checkbox" @bind="resumeTraining" />
                            Resume from existing model (if available)
                        </label>
                    </div>
                    
                    <button class="btn btn-primary" @onclick="StartTraining" disabled="@(string.IsNullOrWhiteSpace(newBotName))">
                        Start Training
                    </button>
                </div>
            }
        </div>
        
        <!-- Available Bots Section -->
        <div class="section bots-section">
            <h2>üèÜ Trained Bots</h2>
            
            @if (availableBots.Any())
            {
                <div class="bots-grid">
                    @foreach (var bot in availableBots.Values.OrderByDescending(b => b.CreatedDate))
                    {
                        <div class="bot-card">
                            <div class="bot-header">
                                <h3>@bot.Name</h3>
                                <div class="bot-actions">
                                    <button class="btn btn-sm btn-success" @onclick="() => PlayAgainstBot(bot.Name)">
                                        Play
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteBot(bot.Name)">
                                        Delete
                                    </button>
                                </div>
                            </div>
                            
                            <div class="bot-info">
                                <p><strong>Created:</strong> @bot.CreatedDate.ToString("MMM dd, yyyy")</p>
                                <p><strong>Training:</strong> @bot.TrainingIterations iterations</p>
                                <p><strong>Description:</strong> @bot.Description</p>
                            </div>
                            
                            <div class="difficulty-selector">
                                <label>Difficulty:</label>
                                <select class="form-control" @onchange="(e) => SetBotDifficulty(bot.Name, e.Value?.ToString())">
                                    <option value="Easy">Easy (Quick thinking)</option>
                                    <option value="Medium" selected>Medium (Balanced)</option>
                                    <option value="Hard">Hard (Strong play)</option>
                                    <option value="Expert">Expert (Maximum strength)</option>
                                </select>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-bots">
                    <p>No trained bots available. Train your first bot above!</p>
                </div>
            }
        </div>
    </div>
    
    <!-- Messages -->
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-@messageType">
            @message
        </div>
    }
</div>

<style>
.bot-management {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.management-sections {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-top: 20px;
}

.section {
    background: white;
    border-radius: 12px;
    padding: 25px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}

.training-section {
    border-left: 4px solid #007bff;
}

.bots-section {
    border-left: 4px solid #28a745;
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 600;
    color: #333;
}

.form-control {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
}

.btn {
    padding: 8px 16px;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
}

.btn-primary {
    background: #007bff;
    color: white;
}

.btn-primary:hover:not(:disabled) {
    background: #0056b3;
}

.btn-success {
    background: #28a745;
    color: white;
}

.btn-success:hover {
    background: #1e7e34;
}

.btn-danger {
    background: #dc3545;
    color: white;
}

.btn-danger:hover {
    background: #c82333;
}

.btn-sm {
    padding: 4px 8px;
    font-size: 12px;
}

.btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.training-progress {
    text-align: center;
}

.progress-bar {
    width: 100%;
    height: 20px;
    background: #e9ecef;
    border-radius: 10px;
    overflow: hidden;
    margin: 15px 0;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #007bff, #0056b3);
    transition: width 0.3s ease;
}

.progress-info {
    display: flex;
    justify-content: space-between;
    font-size: 14px;
    color: #666;
    margin-bottom: 10px;
}

.status {
    color: #007bff;
    font-weight: 600;
    margin: 10px 0;
}

.bots-grid {
    display: grid;
    gap: 20px;
}

.bot-card {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 20px;
    background: #f8f9fa;
}

.bot-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.bot-header h3 {
    margin: 0;
    color: #333;
}

.bot-actions {
    display: flex;
    gap: 8px;
}

.bot-info p {
    margin: 5px 0;
    font-size: 14px;
    color: #666;
}

.difficulty-selector {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px solid #ddd;
}

.difficulty-selector label {
    margin-bottom: 5px;
    font-size: 14px;
    font-weight: 600;
}

.no-bots {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 40px 20px;
}

.alert {
    margin-top: 20px;
    padding: 12px 16px;
    border-radius: 6px;
    font-weight: 500;
}

.alert-success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.alert-danger {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

.alert-info {
    background: #d1ecf1;
    color: #0c5460;
    border: 1px solid #bee5eb;
}
</style>

@code {
    private Dictionary<string, BotInfo> availableBots = new();
    private TrainingProgress? currentTraining;
    
    private string newBotName = "";
    private int trainingIterations = 100;
    private string botDescription = "";
    private bool resumeTraining = false;
    
    private string message = "";
    private string messageType = "";
    
    private readonly Dictionary<string, BotDifficulty> botDifficulties = new();

    protected override void OnInitialized()
    {
        availableBots = BotService.GetAvailableBots();
        currentTraining = BotService.GetTrainingProgress();
        
        BotService.TrainingProgressUpdated += OnTrainingProgressUpdated;
        BotService.TrainingCompleted += OnTrainingCompleted;
        BotService.TrainingError += OnTrainingError;
    }

    private async Task StartTraining()
    {
        if (string.IsNullOrWhiteSpace(newBotName))
        {
            ShowMessage("Please enter a bot name", "danger");
            return;
        }

        var config = new TrainingConfig
        {
            BotName = newBotName.Trim(),
            Iterations = trainingIterations,
            ResumeFromExisting = resumeTraining,
            Description = string.IsNullOrWhiteSpace(botDescription) ? 
                $"AlphaZero bot trained for {trainingIterations} iterations" : 
                botDescription.Trim()
        };

        var success = await BotService.StartTraining(config);
        
        if (success)
        {
            currentTraining = BotService.GetTrainingProgress();
            ShowMessage($"Started training bot '{newBotName}'", "success");
            
            // Clear form
            newBotName = "";
            botDescription = "";
            resumeTraining = false;
        }
        else
        {
            ShowMessage("Failed to start training. Another training may be in progress.", "danger");
        }
    }

    private void StopTraining()
    {
        BotService.StopTraining();
        ShowMessage("Training stopped", "info");
    }

    private async Task PlayAgainstBot(string botName)
    {
        var difficulty = botDifficulties.GetValueOrDefault(botName, BotDifficulty.Medium);
        
        // Store selected bot in session storage and navigate to game
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "selectedBot", botName);
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "selectedDifficulty", difficulty.ToString());
        
        // Navigate to home page where the game is
        await JSRuntime.InvokeVoidAsync("location.assign", "/");
    }

    private async Task DeleteBot(string botName)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete bot '{botName}'?");
        
        if (confirmed)
        {
            var success = BotService.DeleteBot(botName);
            
            if (success)
            {
                availableBots = BotService.GetAvailableBots();
                botDifficulties.Remove(botName);
                ShowMessage($"Bot '{botName}' deleted successfully", "success");
            }
            else
            {
                ShowMessage($"Failed to delete bot '{botName}'", "danger");
            }
        }
    }

    private void SetBotDifficulty(string botName, string? difficultyStr)
    {
        if (Enum.TryParse<BotDifficulty>(difficultyStr, out var difficulty))
        {
            botDifficulties[botName] = difficulty;
        }
    }

    private void OnTrainingProgressUpdated(TrainingProgress progress)
    {
        currentTraining = progress;
        InvokeAsync(StateHasChanged);
    }

    private void OnTrainingCompleted(string botName)
    {
        availableBots = BotService.GetAvailableBots();
        currentTraining = BotService.GetTrainingProgress();
        ShowMessage($"Training completed for bot '{botName}'!", "success");
        InvokeAsync(StateHasChanged);
    }

    private void OnTrainingError(string error)
    {
        currentTraining = BotService.GetTrainingProgress();
        ShowMessage(error, "danger");
        InvokeAsync(StateHasChanged);
    }

    private void ShowMessage(string msg, string type)
    {
        message = msg;
        messageType = type;
        StateHasChanged();
        
        // Clear message after 5 seconds
        Task.Delay(5000).ContinueWith(_ =>
        {
            message = "";
            InvokeAsync(StateHasChanged);
        });
    }

    public void Dispose()
    {
        BotService.TrainingProgressUpdated -= OnTrainingProgressUpdated;
        BotService.TrainingCompleted -= OnTrainingCompleted;
        BotService.TrainingError -= OnTrainingError;
    }
}
